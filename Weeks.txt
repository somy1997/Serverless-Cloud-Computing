Weeks starting from 15 July 2019.

Week 1 : 

Met Sandip sir and sent a mail to sourav kanti addya (Post Doc Fellow) for setting up a weekly meeting and for keeping the first meeting to explain the objective of the MTP.

Week 2 :

Read summer intern's report on cloud computing.

Week 3 :

Replicating the summer intern's work.

Problems : 
The order of steps are not sequential.
Lambda function needs to be created before deploying GET API.
Also, for lambda function to work properly the corresponding database used in the lambda function must be created first.
In test email used "slcciitkgp@gmail.com" instead of keesara's email in 3.2.2 .
Instead of creating 2 separate API, created methods GET and POST associating with same lambda function in the same api my-api.
Instead of creating 2 separate lambda functions, created 1 lambda function and wrote the codes for both so that whichever one needs to be used, the others can be commented out.
But then commenting out was taking time, so created 2 lambda functions now for each method respectively. Deployed both on prod stage.
The DynamoDB has following entry :
{
  "EmailID": "janedoe@gmail.com",
  "FirstName": "Jane",
  "LastName": "Doe"
}
s3 bucket created with name customerdetails1
s3 bucket instructions are not in details and don't know what to do with the html code.
Don't have the files mentioned in 4.

Week 4 :

Creating IAM role for DynamoDB access through lambda official doc : https://aws.amazon.com/getting-started/projects/build-serverless-web-app-lambda-apigateway-s3-dynamodb-cognito/module-3/
Creating proxy for lambda function official doc : https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-create-api-as-simple-proxy-for-lambda.html
Understanding callbacks : https://codeburst.io/javascript-what-the-heck-is-a-callback-aba4da2deced , actually its not completely correct, see the response to one of the comments : https://medium.com/p/51e88773827a/responses/show
While checking with sleep after callback : Response:
{
  "errorMessage": "2019-08-24T17:50:24.064Z c1d8bbbd-4ba7-4813-b536-be63b0872dfe Task timed out after 3.00 seconds"
}
So, fails if timeout set for > 3 seconds of total time.
URL for my-function-get : https://at4u030oh3.execute-api.sa-east-1.amazonaws.com/testmyget/hellomyget?EmailID=janedoe@gmail.com
URL for my-function-post : https://at4u030oh3.execute-api.sa-east-1.amazonaws.com/testmypost/hellomypost?EmailID=johndoe@gmail.com&FirstName=John&LastName=Doe
Currently defined in same api, different resource, different stage but can use same stage.
Generating random names : https://treyhunner.com/2013/02/random-name-generator/
To get billed duration, go to cloudwatch logs, select the session, select text, search REPORT, and copy the text to cwlogs.txt
To find commit URL : Go to the specific commit and click on Browse files.

Week 5 :

Testing memcache latency :

Tutorial : https://docs.aws.amazon.com/lambda/latest/dg/services-elasticache-tutorial.html

This service is a paid service.

Week 6 :

Porting the pipeline from personal account iamasdfghijkl@gmail.com to slcciitkgp@gmail.com as personal account is going to expire soon. Steps taken :

Server location Asia Pacific (Mumbai) for all services
1. Creating DynamoDB Table. Following Siddhartha's report : section 3.5. Note : Instead of seeing the report, just see the link in step 2 where steps for creating the table is also given. Read the whole section before proceeding many mistakes are there. Can also follow tutorial by pressing tutorial button on create table page at top right. Created table CustomerDetails with Primary Key EmailID (String type). Resource ID - arn:aws:dynamodb:ap-south-1:434247619623:table/CustomerDetails
2. Follow https://aws.amazon.com/getting-started/projects/build-serverless-web-app-lambda-apigateway-s3-dynamodb-cognito/module-3/ to create IAM role for accessing the table from the lambda function. Created role with name CustomerDetailsLambda. Created policy with name DynamoDBUniversalAccess.
3. Copying item with ID janedoe@gmail.com into the new DB.
3. Creating lambda function for getting customer details. Following 3.2.1 in Siddhartha's report. Additional step : In choose or create an execution role, choose use an existing role and choose CustomerDetailsLambda. Creating getCustomerDetailsJS for getting details. Copying code and test cases. Tested its working so far. Can also use the link given in step 5 for creating the lambda function.
4. Creating lambda function for updating customer details. Creating postCustomerDetailsJS for posting details. Working similar to step 3. Tested its working so far.
5. Creating API gateway for lambda functions. Follow : https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-create-api-as-simple-proxy-for-lambda.html . Creating API with name CustomerDetailsLambdaProxy. 
Creating resource with name getcustomerdetails (would be part of url). Creating any method with stage name test. Its working.
URL : https://7yx9o87rrh.execute-api.ap-south-1.amazonaws.com/test/getcustomerdetails?EmailID=janedoe@gmail.com
Creating resource with name postcustomerdetails. Creating any method with stage name test. Its working.
URL : https://7yx9o87rrh.execute-api.ap-south-1.amazonaws.com/test/postcustomerdetails?EmailID=johndoe@gmail.com&FirstName=John&LastName=Doe

Week 7 :

Taking stats for Mumbai :

POST URL : https://7yx9o87rrh.execute-api.ap-south-1.amazonaws.com/test/postcustomerdetails
GET URL  : https://7yx9o87rrh.execute-api.ap-south-1.amazonaws.com/test/getcustomerdetails

New observation : The logs are also showing init duration stat with the first log.

Week 8 :

Calling one lambda function from another lambda function : 
1. https://stackoverflow.com/questions/31714788/can-an-aws-lambda-function-call-another
2. https://stackoverflow.com/questions/50372575/how-can-i-call-another-lambda-function-from-current-lambda-function : this is more useful
3. https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/Lambda.html#invoke-property
Need to find latency between lambda to lambda call.
Defined 2 lambda functions : innerFunction and outerFunction.
Used the comments in 1. to add policy to outerFunction role so that it is able to call innerFunction.
Put the actual durations in cwlogsactual.txt and billed durations in cwlogsbilled.txt
Observation : Though the inner function's billed duration was only around 20 ms. The time duration seen inside outer function is around 80 ms suggesting that some kind of queuing mechanism is being followed here because whether using DB call or inner function, the latency is same. Our next goal would be to verify it.

Checking if global variables being shared between multiple lambda function calls.
Observation : Checked if the global variables are being shared by multiple lambda calls. The global variables are share between multiple lambda calls sharing same session (when they share the same server instance). For different sessions, the global variables are not shared.

Week 9 :

Taking stats for single server location and multiple clients location to check if the billed time is same for different client locations.
Hypothesis : The billed time should only depend on the duration which the lambda function call took to run. And, hence even after calling from client location from different latency, the billed time should be same.

Server location is in Mumbai (India) :

POST URL : https://7yx9o87rrh.execute-api.ap-south-1.amazonaws.com/test/postcustomerdetails
GET URL  : https://7yx9o87rrh.execute-api.ap-south-1.amazonaws.com/test/getcustomerdetails

Creating EC2 instances for client in the regions :

India : Mumbai
USA : North California
Europe (UK) : EU (London)
Australia : Asia Pacific (Sidney)
Japan/China : Asia Pacific (Tokyo)

Created oracle.py to make calls, parse logs etc using flags

usage: oracle.py [-h] [-g GENERATE] [-v]
                 [-mp MAKEPOST MAKEPOST | -pp PARSEPOST PARSEPOST | -mg MAKEGET MAKEGET | -pg PARSEGET PARSEGET]
                 datafile numvals

Oracle for doing everything

positional arguments:
  datafile              File for loading or generating our dummy data
  numvals               Number of values to be generated/loaded

optional arguments:
  -h, --help            show this help message and exit
  -g GENERATE, --generate GENERATE
                        To generate data, argument : random seed to generate
                        data
  -v, --verbose         Increase output verbosity
  -mp MAKEPOST MAKEPOST, --makepost MAKEPOST MAKEPOST
                        Make post calls, arguments : Filename for storing
                        stats and URL for Post
  -pp PARSEPOST PARSEPOST, --parsepost PARSEPOST PARSEPOST
                        Parse Post stats from Cloudwatch logs and output the
                        stats, arguments : File from which to read URL
                        response stats and File from which to read Cloudwatch
                        logs (The cloudwatch logs must be copied to this file
                        first). The new stats would be copied to the 1st file
                        in the argument.
  -mg MAKEGET MAKEGET, --makeget MAKEGET MAKEGET
                        Make get calls, arguments : Filename for storing stats
                        and URL for Get
  -pg PARSEGET PARSEGET, --parseget PARSEGET PARSEGET
                        Parse Get stats from Cloudwatch logs and output the
                        stats, arguments : File from which to read URL
                        response stats and File from which to read Cloudwatch
                        logs (The cloudwatch logs must be copied to this file
                        first). The new stats would be copied to the 1st file
                        in the argument.

Created makecalls.sh for making calls from EC2 instances.

Usage : ./makecalls.sh <datafile> <Number of data values to be generated> <random seed for generating data values> <prefix for filenames for storing stats>
Stats files will be stored as <prefix>_post.csv and <prefix_get.csv in the same folder as makecalls.sh. Note that oracle.py should also be in the same folder.
Eg :    ./makecalls.sh data.txt 101 31 tokyo

Created bootstrap.sh to install necessary packages on EC2 instance before running makecalls.sh script.
Usage : ./bootstrap.sh

Created parselogs.sh to parse cwlogs to create stats.
Uses *.csv present in stats* folder and *.txt present in cwlogs* folder.
Usage : <datafile> <Number of data values to be generated> <prefix for filenames for storing stats>
Eg    : ./parselogs.sh data.txt 101 27 kharagpur

Making calls :

While making instances save the key pair as slcc.pem. Copy the address of the instance to sshconfig file under the host slcc. Following commands used for sending data to and from the instances. Copied here for the sake of usability.

scp -r ~/Desktop/test slcc:~/
scp -r slcc:~/test/ ~/Desktop/

Mumbai done.
North California done.
London done.
Sidney done.
Tokyo done.

Observations : Even though there was latency, but the billed durations for the lambda function was approximately the same suggesting that the billed duration doesn't depend on the TCP connection rather it depends only on the time for which lambda function ran. The maintainance of the TCP connection is the job of API gateway.

Week 10 :

Nested Lambda with outer lambda at multiple locations and inner lambda at multiple locations.
Generating stats in a criss cross fashion.
6 locations : Tokyo, Mumbai, Northern California, Sau Paulo, Sidney, London
Generating stats by calling from Kharagpur itself.
Inner function should be with and without DB calls.
Taking stats at different times of the day.
Find mean and standard deviation for all the cells.
The idea is to make an API gateway for all the outer lambda functions at different places around the world.
After this, pass the location and the amazon resource number for inner lambda functions at different places around the world.
The stats need to be generated at different times of the day.
Statistics columns : Time at which request was sent, Total time taken (Kharagpur), Billed Time for outer function, actual time for inner function, billed time for inner function, (if DB call) actual time for DB call
After this, get the mean and std deviation for each of these column for different times of the day.

Function names in each region :

outerFunction, this function calls inner function or innerFunctionDB.
innerFunction, this function is a dummy function.
innerFunctionDB, this function makes DB operations.

IAM roles : 

AllAccessLambda (all access to lambda operations), this access is given to outerFunction.
AllAccessDynamoDB (all access to DB operations), this access is given to innerFunctionDB.
innerFunction is a vanilla lambda function.

Tokyo : ap-northeast-1
https://v8ayvr7yna.execute-api.ap-northeast-1.amazonaws.com/test/test

Mumbai : ap-south-1
https://aw3yar6j4j.execute-api.ap-south-1.amazonaws.com/test/test

Northern California : us-west-1
https://fwcump7jo7.execute-api.us-west-1.amazonaws.com/test/test

Sau Paulo : sa-east-1
https://3zvlb57rq1.execute-api.sa-east-1.amazonaws.com/test/test

Sidney : ap-southeast-2
https://ogkp9x3x69.execute-api.ap-southeast-2.amazonaws.com/test/test

London : eu-west-2
https://cfz54bjgwb.execute-api.eu-west-2.amazonaws.com/test/test

Command : python3 oracle.py

Name of files can be given with path : cwlogs/outer.txt, cwlogs/inner.txt, stats/tokyo_mumbai_db.csv
Note : Need to wait for some time so that the session for outerFunction gets over, otherwise need to select last nval records from the cloudwatch logs.