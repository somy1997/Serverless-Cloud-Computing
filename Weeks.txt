Weeks starting from 15 July 2019.

Week 1 : 

Met Sandip sir and sent a mail to sourav kanti addya (Post Doc Fellow) for setting up a weekly meeting and for keeping the first meeting to explain the objective of the MTP.

Week 2 :

Read summer intern's report on cloud computing.

Week 3 :

Replicating the summer intern's work.

Problems : 
The order of steps are not sequential.
Lambda function needs to be created before deploying GET API.
Also, for lambda function to work properly the corresponding database used in the lambda function must be created first.
In test email used "slcciitkgp@gmail.com" instead of keesara's email in 3.2.2 .
Instead of creating 2 separate API, created methods GET and POST associating with same lambda function in the same api my-api.
Instead of creating 2 separate lambda functions, created 1 lambda function and wrote the codes for both so that whichever one needs to be used, the others can be commented out.
But then commenting out was taking time, so created 2 lambda functions now for each method respectively. Deployed both on prod stage.
The DynamoDB has following entry :
{
  "EmailID": "janedoe@gmail.com",
  "FirstName": "Jane",
  "LastName": "Doe"
}
s3 bucket created with name customerdetails1
s3 bucket instructions are not in details and don't know what to do with the html code.
Don't have the files mentioned in 4.

Week 4 :

Creating IAM role for DynamoDB access through lambda official doc : https://aws.amazon.com/getting-started/projects/build-serverless-web-app-lambda-apigateway-s3-dynamodb-cognito/module-3/
Creating proxy for lambda function official doc : https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-create-api-as-simple-proxy-for-lambda.html
Understanding callbacks : https://codeburst.io/javascript-what-the-heck-is-a-callback-aba4da2deced , actually its not completely correct, see the response to one of the comments : https://medium.com/p/51e88773827a/responses/show
While checking with sleep after callback : Response:
{
  "errorMessage": "2019-08-24T17:50:24.064Z c1d8bbbd-4ba7-4813-b536-be63b0872dfe Task timed out after 3.00 seconds"
}
So, fails if timeout set for > 3 seconds of total time.
URL for my-function-get : https://at4u030oh3.execute-api.sa-east-1.amazonaws.com/testmyget/hellomyget?EmailID=janedoe@gmail.com
URL for my-function-post : https://at4u030oh3.execute-api.sa-east-1.amazonaws.com/testmypost/hellomypost?EmailID=johndoe@gmail.com&FirstName=John&LastName=Doe
Currently defined in same api, different resource, different stage but can use same stage.
Generating random names : https://treyhunner.com/2013/02/random-name-generator/
To get billed duration, go to cloudwatch logs, select the session, select text, search REPORT, and copy the text to cwlogs.txt

Testing memcache latency :

Tutorial : https://docs.aws.amazon.com/lambda/latest/dg/services-elasticache-tutorial.html

Porting the pipeline from personal account iamasdfghijkl@gmail.com to slcciitkgp@gmail.com as personal account is going to expire soon. Steps taken :

Server location Asia Pacific (Mumbai) for all services
1. Creating DynamoDB Table. Following Siddhartha's report : section 3.5. Note : Instead of seeing the report, just see the link in step 2 where steps for creating the table is also given. Read the whole section before proceeding many mistakes are there. Can also follow tutorial by pressing tutorial button on create table page at top right. Created table CustomerDetails with Primary Key EmailID (String type). Resource ID - arn:aws:dynamodb:ap-south-1:434247619623:table/CustomerDetails
2. Follow https://aws.amazon.com/getting-started/projects/build-serverless-web-app-lambda-apigateway-s3-dynamodb-cognito/module-3/ to create IAM role for accessing the table from the lambda function. Created role with name CustomerDetailsLambda. Created policy with name DynamoDBUniversalAccess.
3. Copying item with ID janedoe@gmail.com into the new DB.
3. Creating lambda function for getting customer details. Following 3.2.1 in Siddhartha's report. Additional step : In choose or create an execution role, choose use an existing role and choose CustomerDetailsLambda. Creating getCustomerDetailsJS for getting details. Copying code and test cases. Tested its working so far. Can also use the link given in step 5 for creating the lambda function.
4. Creating lambda function for updating customer details. Creating postCustomerDetailsJS for posting details. Working similar to step 3. Tested its working so far.
5. Creating API gateway for lambda functions. Follow : https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-create-api-as-simple-proxy-for-lambda.html . Creating API with name CustomerDetailsLambdaProxy. 
Creating resource with name getcustomerdetails (would be part of url). Creating any method with stage name test. Its working.
URL : https://7yx9o87rrh.execute-api.ap-south-1.amazonaws.com/test/getcustomerdetails?EmailID=janedoe@gmail.com
Creating resource with name postcustomerdetails. Creating any method with stage name test. Its working.
URL : https://7yx9o87rrh.execute-api.ap-south-1.amazonaws.com/test/postcustomerdetails?EmailID=johndoe@gmail.com&FirstName=John&LastName=Doe

Taking stats for Mumbai :

POST URL : https://7yx9o87rrh.execute-api.ap-south-1.amazonaws.com/test/postcustomerdetails
GET URL  : https://7yx9o87rrh.execute-api.ap-south-1.amazonaws.com/test/getcustomerdetails

New observation : The logs are also showing init duration stat with the first log.